{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError } from 'expo-modules-core';\nvar GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nvar googleApiKey;\nexport function setGoogleApiKey(apiKey) {\n  googleApiKey = apiKey;\n}\nexport function googleGeocodeAsync(_x) {\n  return _googleGeocodeAsync.apply(this, arguments);\n}\n\nfunction _googleGeocodeAsync() {\n  _googleGeocodeAsync = _asyncToGenerator(function* (address) {\n    assertGoogleApiKey();\n    var result = yield requestGoogleApiAsync({\n      address: address\n    });\n\n    if (result.status === 'ZERO_RESULTS') {\n      return [];\n    }\n\n    assertGeocodeResults(result);\n    return result.results.map(geocodingResultToLocation);\n  });\n  return _googleGeocodeAsync.apply(this, arguments);\n}\n\nexport function googleReverseGeocodeAsync(_x2) {\n  return _googleReverseGeocodeAsync.apply(this, arguments);\n}\n\nfunction _googleReverseGeocodeAsync() {\n  _googleReverseGeocodeAsync = _asyncToGenerator(function* (options) {\n    assertGoogleApiKey();\n    var result = yield requestGoogleApiAsync({\n      latlng: options.latitude + \",\" + options.longitude\n    });\n\n    if (result.status === 'ZERO_RESULTS') {\n      return [];\n    }\n\n    assertGeocodeResults(result);\n    return result.results.map(reverseGeocodingResultToAddress);\n  });\n  return _googleReverseGeocodeAsync.apply(this, arguments);\n}\n\nfunction assertGeocodeResults(resultObject) {\n  var status = resultObject.status,\n      error_message = resultObject.error_message;\n\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');\n    }\n\n    throw new CodedError(status, \"An error occurred during geocoding.\");\n  }\n}\n\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error('Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.');\n  }\n}\n\nfunction requestGoogleApiAsync(_x3) {\n  return _requestGoogleApiAsync.apply(this, arguments);\n}\n\nfunction _requestGoogleApiAsync() {\n  _requestGoogleApiAsync = _asyncToGenerator(function* (params) {\n    var query = Object.entries(params).map(function (entry) {\n      return entry[0] + \"=\" + encodeURI(entry[1]);\n    }).join('&');\n    var result = yield fetch(GOOGLE_API_URL + \"?key=\" + googleApiKey + \"&\" + query);\n    return yield result.json();\n  });\n  return _requestGoogleApiAsync.apply(this, arguments);\n}\n\nfunction geocodingResultToLocation(result) {\n  var location = result.geometry.location;\n  return {\n    latitude: location.lat,\n    longitude: location.lng\n  };\n}\n\nfunction reverseGeocodingResultToAddress(result) {\n  var address = {};\n\n  for (var _ref of result.address_components) {\n    var long_name = _ref.long_name;\n    var short_name = _ref.short_name;\n    var types = _ref.types;\n\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n\n    if (types.includes('street_number')) {\n      address.streetNumber = long_name;\n      continue;\n    }\n\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n\n  return address;\n}","map":{"version":3,"sources":["../src/LocationGoogleGeocoding.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { LocationGeocodedAddress, LocationGeocodedLocation } from './Location.types';\n\nconst GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nlet googleApiKey;\n\ntype GoogleApiGeocodingAddressComponent = {\n  long_name: string;\n  short_name: string;\n  types: string[];\n};\n\ntype GoogleApiGeocodingResult = {\n  address_components: GoogleApiGeocodingAddressComponent[];\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n  };\n};\n\ntype GoogleApiGeocodingResponse = {\n  results: GoogleApiGeocodingResult[];\n  status: string;\n};\n\n// @needsAudit\n/**\n * Sets a Google API Key for using Google Maps Geocoding API which is used by default on Web\n * platform and can be enabled through `useGoogleMaps` option of `geocodeAsync` and `reverseGeocodeAsync`\n * methods. It might be useful for Android devices that do not have Google Play Services, hence no\n * Geocoder Service.\n * @param apiKey Google API key obtained from Google API Console. This API key must have `Geocoding API`\n * enabled, otherwise your geocoding requests will be denied.\n */\nexport function setGoogleApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nexport async function googleGeocodeAsync(address: string): Promise<LocationGeocodedLocation[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({ address });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(geocodingResultToLocation);\n}\n\nexport async function googleReverseGeocodeAsync(options: {\n  latitude: number;\n  longitude: number;\n}): Promise<LocationGeocodedAddress[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({\n    latlng: `${options.latitude},${options.longitude}`,\n  });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(reverseGeocodingResultToAddress);\n}\n\n// https://developers.google.com/maps/documentation/geocoding/intro\nfunction assertGeocodeResults(resultObject: any): void {\n  const { status, error_message } = resultObject;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(\n        status,\n        'the request could not be processed due to a server error. The request may succeed if you try again.'\n      );\n    }\n    throw new CodedError(status, `An error occurred during geocoding.`);\n  }\n}\n\n/**\n * Makes sure the Google API key is set.\n */\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error(\n      'Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.'\n    );\n  }\n}\n\n/**\n * Generic and handy method for sending requests to Google Maps API endpoint.\n */\nasync function requestGoogleApiAsync(\n  params: { address: string } | { latlng: string }\n): Promise<GoogleApiGeocodingResponse> {\n  const query = Object.entries(params)\n    .map((entry) => `${entry[0]}=${encodeURI(entry[1])}`)\n    .join('&');\n  const result = await fetch(`${GOOGLE_API_URL}?key=${googleApiKey}&${query}`);\n  return await result.json();\n}\n\n/**\n * Converts Google's result to the location object.\n */\nfunction geocodingResultToLocation(result: GoogleApiGeocodingResult): LocationGeocodedLocation {\n  const { location } = result.geometry;\n  return {\n    latitude: location.lat,\n    longitude: location.lng,\n  };\n}\n\n/**\n * Converts Google's result to address object.\n */\nfunction reverseGeocodingResultToAddress(\n  result: GoogleApiGeocodingResult\n): LocationGeocodedAddress {\n  const address: Partial<LocationGeocodedAddress> = {};\n\n  for (const { long_name, short_name, types } of result.address_components) {\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n    if (types.includes('street_number')) {\n      address.streetNumber = long_name;\n      continue;\n    }\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n  return address as LocationGeocodedAddress;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}