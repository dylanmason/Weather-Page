{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport ExpoLocation from \"./ExpoLocation\";\nimport { LocationAccuracy } from \"./Location.types\";\nimport { LocationSubscriber } from \"./LocationSubscribers\";\nexport function installWebGeolocationPolyfill() {\n  if (Platform.OS !== 'web') {\n    if (!('window' in global)) {\n      global.window = global;\n    }\n\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n\n    window.navigator.geolocation = {\n      getCurrentPosition: getCurrentPosition,\n      watchPosition: watchPosition,\n      clearWatch: clearWatch,\n      stopObserving: function stopObserving() {}\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options) {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced\n  };\n}\n\nfunction getCurrentPosition(success) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\nfunction _getCurrentPositionAsyncWrapper(_x, _x2, _x3) {\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\n\nfunction _getCurrentPositionAsyncWrapper2() {\n  _getCurrentPositionAsyncWrapper2 = _asyncToGenerator(function* (success, error, options) {\n    try {\n      yield ExpoLocation.requestPermissionsAsync();\n      var result = yield ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n      success(result);\n    } catch (e) {\n      error(e);\n    }\n  });\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\n\nfunction watchPosition(success, error, options) {\n  var watchId = LocationSubscriber.registerCallback(success);\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(function (err) {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({\n      watchId: watchId,\n      message: err.message,\n      code: err.code\n    });\n  });\n  return watchId;\n}\n\nfunction clearWatch(watchId) {\n  LocationSubscriber.unregisterCallback(watchId);\n}","map":{"version":3,"sources":["../src/GeolocationPolyfill.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAAyB,mBAAzB;AAEA,OAAO,YAAP;AACA,SAAyB,gBAAzB;AACA,SAAS,kBAAT;AAeA,OAAM,SAAU,6BAAV,GAAuC;AAC3C,MAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AAEzB,QAAI,EAAE,YAAY,MAAd,CAAJ,EAA2B;AACzB,MAAA,MAAM,CAAC,MAAP,GAAgB,MAAhB;AACD;;AACD,QAAI,EAAE,eAAe,MAAM,CAAC,MAAxB,CAAJ,EAAqC;AACnC,MAAA,MAAM,CAAC,MAAP,CAAc,SAAd,GAA0B,EAA1B;AACD;;AAGD,IAAA,MAAM,CAAC,SAAP,CAAiB,WAAjB,GAA+B;AAC7B,MAAA,kBAAkB,EAAlB,kBAD6B;AAE7B,MAAA,aAAa,EAAb,aAF6B;AAG7B,MAAA,UAAU,EAAV,UAH6B;AAO7B,MAAA,aAAa,EAAE,yBAAK,CAAG;AAPM,KAA/B;AASD;AACF;;AAED,SAAS,yBAAT,CAAmC,OAAnC,EAA8D;AAC5D,SAAO;AACL,IAAA,QAAQ,EAAE,OAAO,CAAC,kBAAR,GAA6B,gBAAgB,CAAC,IAA9C,GAAqD,gBAAgB,CAAC;AAD3E,GAAP;AAGD;;AAED,SAAS,kBAAT,CACE,OADF,EAGkC;AAAA,MADhC,KACgC,uEADE,YAAK,CAAG,CACV;AAAA,MAAhC,OAAgC,uEAAF,EAAE;;AAEhC,EAAA,+BAA+B,CAAC,OAAD,EAAU,KAAV,EAAiB,OAAjB,CAA/B;AACD;;SAIc,+B;;;;;uDAAf,WACE,OADF,EAEE,KAFF,EAGE,OAHF,EAG6B;AAE3B,QAAI;AACF,YAAM,YAAY,CAAC,uBAAb,EAAN;AACA,UAAM,MAAM,SAAS,YAAY,CAAC,uBAAb,CAAqC,yBAAyB,CAAC,OAAD,CAA9D,CAArB;AACA,MAAA,OAAO,CAAC,MAAD,CAAP;AACD,KAJD,CAIE,OAAO,CAAP,EAAU;AACV,MAAA,KAAK,CAAC,CAAD,CAAL;AACD;AACF,G;;;;AAGD,SAAS,aAAT,CACE,OADF,EAEE,KAFF,EAGE,OAHF,EAG6B;AAE3B,MAAM,OAAO,GAAG,kBAAkB,CAAC,gBAAnB,CAAoC,OAApC,CAAhB;AAEA,EAAA,YAAY,CAAC,sBAAb,CAAoC,OAApC,EAA6C,OAA7C,EAAsD,KAAtD,CAA4D,UAAC,GAAD,EAAQ;AAClE,IAAA,kBAAkB,CAAC,kBAAnB,CAAsC,OAAtC;AACA,IAAA,KAAK,CAAC;AAAE,MAAA,OAAO,EAAP,OAAF;AAAW,MAAA,OAAO,EAAE,GAAG,CAAC,OAAxB;AAAiC,MAAA,IAAI,EAAE,GAAG,CAAC;AAA3C,KAAD,CAAL;AACD,GAHD;AAKA,SAAO,OAAP;AACD;;AAGD,SAAS,UAAT,CAAoB,OAApB,EAAmC;AACjC,EAAA,kBAAkB,CAAC,kBAAnB,CAAsC,OAAtC;AACD","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\nimport { LocationSubscriber } from './LocationSubscribers';\n\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\ntype GeolocationErrorCallback = (error: any) => void;\n\ntype GeolocationOptions = {\n  enableHighAccuracy?: boolean;\n};\n\ndeclare const global: any;\n\n// @needsAudit\n/**\n * Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.\n */\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Make sure `window.navigator` is defined in the global scope.\n    if (!('window' in global)) {\n      global.window = global;\n    }\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\n  };\n}\n\nfunction getCurrentPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback = () => {},\n  options: GeolocationOptions = {}\n): void {\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n) {\n  const watchId = LocationSubscriber.registerCallback(success);\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch((err) => {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  LocationSubscriber.unregisterCallback(watchId);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}