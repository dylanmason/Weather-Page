{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport * as Location from 'expo-location';\nimport React, { useEffect, useState } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var units = \"imperial\";\n  var key = \"1c384d0483290f4ddf94960bfee68f6b\";\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      weather = _useState6[0],\n      setWeather = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      town = _useState8[0],\n      setTown = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentTemperature = _useState10[0],\n      setCurrentTemperature = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      feelsLike = _useState12[0],\n      setFeelsLike = _useState12[1];\n\n  var opacity = useState(new Animated.Value(0))[0];\n\n  var fadeIn = function fadeIn() {\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 1000,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var Icon = function Icon() {\n    if (weather === \"clear sky\") {\n      return _jsx(Ionicons, {\n        name: \"ios-sunny-outline\",\n        size: 48,\n        color: \"hsl(204, 100%, 90%)\"\n      });\n    }\n  };\n\n  useEffect(function () {\n    fadeIn();\n\n    _asyncToGenerator(function* () {\n      var _yield$Location$reque = yield Location.requestForegroundPermissionsAsync(),\n          status = _yield$Location$reque.status;\n\n      if (status !== 'granted') {\n        setErrorMsg('Permission to access location was denied');\n        return;\n      }\n\n      var location = yield Location.getCurrentPositionAsync({});\n      setLocation(location);\n      var latitude = location.coords.latitude;\n      var longitude = location.coords.longitude;\n      var data = yield fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&units=\" + units + \"&appid=\" + key);\n      var jsonInfo = yield data.json();\n      console.log(jsonInfo);\n      setWeather(jsonInfo.weather[0].description);\n      setTown(jsonInfo.name);\n      setCurrentTemperature(jsonInfo.main.temp);\n      setFeelsLike(jsonInfo.main.feels_like);\n    })();\n  }, []);\n  var text = 'Waiting..';\n\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (weather) {\n    text = JSON.stringify(weather);\n  }\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(Animated.View, {\n      style: opacity,\n      children: [_jsx(Icon, {}), _jsx(Text, {\n        style: styles.townText,\n        children: town\n      }), _jsxs(Text, {\n        style: styles.currentTemperatureText,\n        children: [currentTemperature, \"\\xB0F\"]\n      }), _jsxs(Text, {\n        style: styles.feelsLikeText,\n        children: [feelsLike, \"\\xB0F\"]\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'hsl(204, 100%, 50%)',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  currentTemperatureText: {\n    color: 'hsl(204, 100%, 90%)',\n    fontSize: 48\n  },\n  feelsLikeText: {\n    color: 'hsl(204, 100%, 90%)',\n    fontSize: 14\n  },\n  townText: {\n    color: 'hsl(204, 100%, 90%)',\n    fontSize: 32\n  }\n});","map":{"version":3,"sources":["/home/dylanmason/projects/Weather-Page/App.js"],"names":["StatusBar","Location","React","useEffect","useState","Ionicons","App","units","key","location","setLocation","errorMsg","setErrorMsg","weather","setWeather","town","setTown","currentTemperature","setCurrentTemperature","feelsLike","setFeelsLike","opacity","Animated","Value","fadeIn","timing","toValue","duration","useNativeDriver","start","Icon","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","latitude","coords","longitude","data","fetch","jsonInfo","json","console","log","description","name","main","temp","feels_like","text","JSON","stringify","styles","container","townText","currentTemperatureText","feelsLikeText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","color","fontSize"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet, Text, View, Animated } from 'react-native';\nimport * as Location from 'expo-location';\nimport React, {useEffect, useState} from 'react';\nimport { Ionicons } from '@expo/vector-icons'; \n\nexport default function App() {\n\n    const units = \"imperial\";\n    const key = \"1c384d0483290f4ddf94960bfee68f6b\";\n\n    const [location, setLocation] = useState(null);\n    const [errorMsg, setErrorMsg] = useState(null);\n    const [weather, setWeather] = useState(null);\n    const [town, setTown] = useState(null);\n    const [currentTemperature, setCurrentTemperature] = useState(null);\n    const [feelsLike, setFeelsLike] = useState(null);\n    const opacity = useState(new Animated.Value(0))[0];\n\n    const fadeIn = () => {\n        Animated.timing(opacity, {\n            toValue: 1,\n            duration: 1000,\n            useNativeDriver: true\n        }).start();\n    }\n    const Icon = () => {\n        if (weather === \"clear sky\") {\n            return (\n                <Ionicons name=\"ios-sunny-outline\" size={48} color='hsl(204, 100%, 90%)' />\n            );\n        }\n    }\n    useEffect(() => {\n        fadeIn();\n        (async () => {\n            let { status } = await Location.requestForegroundPermissionsAsync();\n            if (status !== 'granted') {\n                setErrorMsg('Permission to access location was denied');\n                return;\n            }\n\n            let location = await Location.getCurrentPositionAsync({});\n            setLocation(location);\n            const latitude = location.coords.latitude;\n            const longitude = location.coords.longitude;\n            const data = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=${units}&appid=${key}`);\n            const jsonInfo = await data.json();\n            console.log(jsonInfo);\n            setWeather(jsonInfo.weather[0].description);\n            setTown(jsonInfo.name);\n            setCurrentTemperature(jsonInfo.main.temp);\n            setFeelsLike(jsonInfo.main.feels_like);\n\n        })();\n    }, []);\n\n    let text = 'Waiting..';\n    if (errorMsg) {\n        text = errorMsg;\n    } else if (weather) {\n        text = JSON.stringify(weather);\n    }\n\n\n    return (\n        <View style={styles.container}>\n        <Animated.View style={opacity}>\n        <Icon />\n        <Text style={styles.townText}>{town}</Text>\n        <Text style={styles.currentTemperatureText}>{currentTemperature}&deg;F</Text>\n        <Text style={styles.feelsLikeText}>{feelsLike}&deg;F</Text>\n        </Animated.View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: 'hsl(204, 100%, 50%)',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    currentTemperatureText: {\n        color: 'hsl(204, 100%, 90%)',\n        fontSize: 48,\n    },\n    feelsLikeText: {\n        color: 'hsl(204, 100%, 90%)',\n        fontSize: 14,\n    },\n    townText: {\n        color: 'hsl(204, 100%, 90%)',\n        fontSize: 32,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}